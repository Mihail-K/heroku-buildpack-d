#!/usr/bin/env bash

BUILDPACK_DIR=$(cd "$(dirname $0)" && pwd)

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

# - Version Selection

DMD_VERSION=${DMD_VERSION:-"2.071.0"}
DUB_VERSION="v${DUB_VERSION:-"0.9.24"}"

# - Paths

DMD_ARCHIVE_PATH="http://downloads.dlang.org/releases/2.x/$DMD_VERSION"
DUB_ARCHIVE_PATH=https://github.com/D-Programming-Language/dub/archive

TOOL_DIR=$BUILD_DIR/toolchain
ARCHIVE_DIR=$CACHE_DIR/archives
LIB_DIR=$CACHE_DIR/libs
DMD_DIR=dmd2

mkdir -p "$TOOL_DIR" "$ARCHIVE_DIR" "$LIB_DIR"

DMD_ARCHIVE="dmd.$DMD_VERSION.linux"
DUB_ARCHIVE=$DUB_VERSION
DUB_DIR=dub-${DUB_ARCHIVE#v}

indent() {
  sed -u 's/^/       /'
}

# download latest archives
cd $ARCHIVE_DIR
if [ ! -f "$DMD_ARCHIVE.tar.xz" ]; then
    echo
    echo "-----> Downloading DMD"
    curl -OL "$DMD_ARCHIVE_PATH/$DMD_ARCHIVE.tar.xz"
fi | indent

if [ ! -f "$DUB_ARCHIVE.tar.gz" ]; then
 echo
 echo "-----> Downloading dub package manager"
 curl -OL "$DUB_ARCHIVE_PATH/$DUB_ARCHIVE.tar.gz"
fi | indent


# initialise toolchain
export PATH=$TOOL_DIR/$DMD_DIR/linux/bin64:$TOOL_DIR/$DUB_DIR/bin:$BUILDPACK_DIR:$PATH
echo
echo "-----> Setting PATH: $PATH"
echo
echo "-----> Initializing toolchain"
cd "$ARCHIVE_DIR"
tar xf "$DMD_ARCHIVE.tar.xz" -C "$TOOL_DIR"
tar xf "$DUB_ARCHIVE.tar.gz" -C "$TOOL_DIR"
cd "$TOOL_DIR/$DUB_DIR"
./build.sh | indent
DUB_BIN=`ls -lh $TOOL_DIR/$DUB_DIR/bin/dub`
echo "-----> DUB package manager cmd found at $DUB_BIN"


echo
echo "-----> Building app"
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/app/opt/lib/pkgconfig
# link the dub cache to the cache folder
mkdir -p "$CACHE_DIR/.dub"
if [ ! -e "$BUILD_DIR/.dub" ]; then
    ln -s "$CACHE_DIR/.dub" "$BUILD_DIR/.dub"
fi

status=1

# pre-build hook
cd "$BUILD_DIR"
if [ -f dub-prebuild ]; then
  echo
  echo "Running dub-prebuild…" | indent
  ./dub-prebuild "$BUILD_DIR" "$CACHE_DIR" | indent
fi

echo
echo "Running dub build…" | indent
if dub build --build=plain; then
  echo
  echo "Build was successful" | indent
  status=0
else
  echo
  echo "!!! Build failed" | indent
  status=1
fi

# post-build hook
cd "$BUILD_DIR"
if [ -f dub-postbuild ]; then
    echo
    echo "Running dub-postbuild…" | indent
    ./dub-postbuild "$BUILD_DIR" "$CACHE_DIR" | indent
fi

# clean up any remaining sources
rm -rf "$TOOL_DIR" source src views

exit $status
